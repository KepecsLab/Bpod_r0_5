function varargout = LiquidRewardCalGui(varargin)
% LIQUIDREWARDCALGUI M-file for LiquidRewardCalGui.fig
%      LIQUIDREWARDCALGUI, by itself, creates a new LIQUIDREWARDCALGUI or raises the existing
%      singleton*.
%
%      H = LIQUIDREWARDCALGUI returns the handle to a new LIQUIDREWARDCALGUI or the handle to
%      the existing singleton*.
%
%      LIQUIDREWARDCALGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in LIQUIDREWARDCALGUI.M with the given input arguments.
%
%      LIQUIDREWARDCALGUI('Property','Value',...) creates a new LIQUIDREWARDCALGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before LiquidRewardCalGui_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to LiquidRewardCalGui_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help LiquidRewardCalGui

% Last Modified by GUIDE v2.5 11-Apr-2011 00:45:10

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @LiquidRewardCalGui_OpeningFcn, ...
    'gui_OutputFcn',  @LiquidRewardCalGui_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before LiquidRewardCalGui is made visible.
function LiquidRewardCalGui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to LiquidRewardCalGui (see VARARGIN)
loadBpodPath
TestSavePath = [BpodPath 'Calibration Files'];
if exist(TestSavePath) == 7
    SavePath = [BpodPath 'Calibration Files\Liquid Reward Calibration\LiquidCalibration.mat'];
    if exist('SavePath')
        load LiquidCalibration
        Interval = num2str(round((now - LiquidCal(1).LastDateVerified)/.86400));
        set(handles.text6, 'String', ['Calibration curves last generated ' Interval ' days ago']);
    end
end
handles.VerificationRound = 0;
handles.CalibrationRound = 0;
% Choose default command line output for LiquidRewardCalGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes LiquidRewardCalGui wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = LiquidRewardCalGui_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global StateMachine;
Value = get(handles.popupmenu1, 'Value');
switch Value
    case 1
        nPulses = 100;
    case 2
        nPulses = 150;
    case 3
        nPulses = 200;
end
PulseAmount = str2double(get(handles.edit3, 'String'));
if ~isnan(PulseAmount)
    if (PulseAmount > 2) && (rem(PulseAmount, 1) == 0) && PulseAmount <= 50
        % Convert pulse amount to milliseconds by table
        load LiquidCalibration
        ValveDuration = GetValveTimes(PulseAmount);
        ExpectedAmount = ((PulseAmount*nPulses)/1000);
        ExpectedAmountError = ExpectedAmount*.05;
        set(handles.pushbutton4, 'Enable', 'off');
        set(handles.text16, 'String', num2str(roundTo(ExpectedAmount, 2)));
        set(handles.text17, 'String', num2str(roundTo(ExpectedAmountError, 2)));
        StateMachine.BeingUsed = 1;
        LiquidRewardCal(nPulses, [ValveDuration(1) ValveDuration(2) ValveDuration(3)], 500);
        %waitfor(StateMachine,'BeingUsed', 0)
        set(handles.pushbutton4, 'Enable', 'on');
        set(handles.edit5, 'Enable', 'on');
        set(handles.edit8, 'Enable', 'on');
        set(handles.edit9, 'Enable', 'on');
        uicontrol(handles.edit5);
    else
        msgbox('Pulse amount must be a positive integer in the range 2 - 50ul')
        BpodErrorSound
    end
else
    msgbox('          Pulse amount invalid')
    BpodErrorSound
end

% Choose default command line output for LiquidRewardCalGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit3_Callback(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit3 as text
%        str2double(get(hObject,'String')) returns contents of edit3 as a
%        double

% --- Executes during object creation, after setting all properties.
function edit3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit4_Callback(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit4 as text
%        str2double(get(hObject,'String')) returns contents of edit4 as a double


% --- Executes during object creation, after setting all properties.
function edit4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
load LiquidCalibration
handles.PointsToTest = [5 15 30]; %in microliters
handles.PointsToTest = handles.PointsToTest(randperm(3));
k = msgbox('Test-point 1 of 3. Please refill liquid and click Ok to begin.', 'modal');
waitfor(k);
ValveDuration = GetValveTimes(handles.PointsToTest(1));
LiquidRewardCal(100, [ValveDuration(1) ValveDuration(2) ValveDuration(3)], 500);
set(handles.edit7, 'Enable', 'on');
set(handles.edit6, 'Enable', 'on');
set(handles.edit1, 'Enable', 'on');
set(handles.pushbutton1, 'Enable', 'off');
set(handles.pushbutton5, 'Enable', 'on');
uicontrol(handles.edit7);
handles.Verifying = 1;
handles.Calibrating = 0;
handles.VerificationRound = 1;
handles.output = hObject;
guidata(hObject, handles);


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
load LiquidCalibration
handles.DurationsToTest = [15 25 50 75 100 150]; %in milliseconds
handles.DurationsToTest = handles.DurationsToTest(randperm(6));
k = msgbox('Measuring point 1 of 6. Please refill liquid and click Ok to begin.', 'modal');
waitfor(k);
ValveDuration = zeros(1,3);
ValveDuration(1:3) = handles.DurationsToTest(1);
LiquidRewardCal(100, [ValveDuration(1) ValveDuration(2) ValveDuration(3)], 500);
set(handles.edit7, 'Enable', 'on');
set(handles.edit6, 'Enable', 'on');
set(handles.edit1, 'Enable', 'on');
set(handles.pushbutton2, 'Enable', 'off');
set(handles.pushbutton5, 'Enable', 'on');
uicontrol(handles.edit7);
handles.CalibrationRound = 1;
handles.Calibrating = 1;
handles.Verifying = 0;
handles.output = hObject;
guidata(hObject, handles);


function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
load LiquidCalibration
CalFig = figure('Position', [150 378 1200 400], 'Name', 'Valve Calibration Curve-fits','numbertitle','off');
subplot(1,3,1);
scatter(LiquidCal(1).Table(:,1), LiquidCal(1).Table(:,2), 'LineWidth', 2)
set(gca, 'tickdir', 'out');
set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
hold on
p = polyfit(LiquidCal(1).Table(:,1),LiquidCal(1).Table(:,2),3);
Vector = polyval(p,0:10:150);
plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
title('Left valve')
h = legend({'Individual measurements', 'Cubic polynomial fit'});
set(h, 'Location', 'Best');
subplot(1,3,2);
scatter(LiquidCal(2).Table(:,1), LiquidCal(2).Table(:,2), 'LineWidth', 2)
set(gca, 'tickdir', 'out');
set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
hold on
p = polyfit(LiquidCal(2).Table(:,1),LiquidCal(2).Table(:,2),3);
Vector = polyval(p,0:10:150);
plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
title('Center valve')
subplot(1,3,3);
scatter(LiquidCal(3).Table(:,1), LiquidCal(3).Table(:,2), 'LineWidth', 2)
set(gca, 'tickdir', 'out');
set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
hold on
p = polyfit(LiquidCal(3).Table(:,1),LiquidCal(3).Table(:,2),3);
Vector = polyval(p,0:10:150);
plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
title('Right valve')


% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if handles.Verifying == 1
    if handles.VerificationRound <= 3
        LeftAmount = str2double(get(handles.edit7, 'String'));
        CenterAmount = str2double(get(handles.edit6, 'String'));
        RightAmount = str2double(get(handles.edit1, 'String'));
        handles.VerificationMeasurements(handles.VerificationRound,1) = LeftAmount;
        handles.VerificationMeasurements(handles.VerificationRound,2) = CenterAmount;
        handles.VerificationMeasurements(handles.VerificationRound,3) = RightAmount;
        handles.VerificationRound = handles.VerificationRound + 1;
        switch handles.VerificationRound
            case 2
                k = msgbox('Test-point 2 of 3. Please refill liquid and click Ok to begin.', 'modal');
                waitfor(k);
                ValveDuration = GetValveTimes(handles.PointsToTest(2));
                LiquidRewardCal(100, [ValveDuration(1) ValveDuration(2) ValveDuration(3)], 500);
            case 3
                k = msgbox('Test-point 3 of 3. Please refill liquid and click Ok to begin.', 'modal');
                waitfor(k);
                ValveDuration = GetValveTimes(handles.PointsToTest(3));
                LiquidRewardCal(100, [ValveDuration(1) ValveDuration(2) ValveDuration(3)], 500);
        end
        if handles.VerificationRound < 4
            set(handles.edit7, 'Enable', 'on');
            set(handles.edit6, 'Enable', 'on');
            set(handles.edit1, 'Enable', 'on');
            set(handles.edit7, 'String', '0.00');
            set(handles.edit6, 'String', '0.00');
            set(handles.edit1, 'String', '0.00');
            set(handles.pushbutton1, 'Enable', 'off');
            set(handles.pushbutton5, 'Enable', 'on');
            uicontrol(handles.edit7);
            handles.output = hObject;
            guidata(hObject, handles);
        end
        if handles.VerificationRound == 4
            % Compare measurements to expected values, notify if re-calibration is
            % needed, if not, reset verification timer
            ExpectedMeasurements = handles.PointsToTest /10;
            ActualMeasurements = handles.VerificationMeasurements;
            ActualSinglePulseVolume = NanOutZeros(ActualMeasurements * 10);
            Errors = ExpectedMeasurements * .05;
            VerifiedValues = zeros(3);
            for x = 1:3
                VerifiedValues(x,:) = (ActualMeasurements(x,:) < (ExpectedMeasurements(x)+Errors(x))) .* (ActualMeasurements(x,:) > (ExpectedMeasurements(x)-Errors(x)));
            end
            set(handles.pushbutton1, 'Enable', 'on');
            set(handles.edit7, 'Enable', 'off');
            set(handles.edit6, 'Enable', 'off');
            set(handles.edit1, 'Enable', 'off');
            set(handles.pushbutton5, 'Enable', 'off');
            set(handles.edit7, 'String', '0.00');
            set(handles.edit6, 'String', '0.00');
            set(handles.edit1, 'String', '0.00');
            % Display results
            load LiquidCalibration
            CalFig = figure('Position', [150 378 1200 400], 'Name', 'Valve Calibration Curve-fits','numbertitle','off');
            subplot(1,3,1);
            scatter(LiquidCal(1).Table(:,1), LiquidCal(1).Table(:,2), 'LineWidth', 2)
            hold on
            % Add verification points
            V = zeros(3);
            V(1,1:3) = GetValveTimes(handles.PointsToTest(1));
            V(2,1:3) = GetValveTimes(handles.PointsToTest(2));
            V(3,1:3) = GetValveTimes(handles.PointsToTest(3));
            if VerifiedValues(1,1) == 1
                scatter(V(1,1), ActualSinglePulseVolume(1,1), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(1,1), ActualSinglePulseVolume(1,1), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(2,1) == 1
                scatter(V(2,1),ActualSinglePulseVolume(2,1), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(2,1), ActualSinglePulseVolume(2,1), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(3,1) == 1
                scatter(V(3,1), ActualSinglePulseVolume(3,1), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(3,1), ActualSinglePulseVolume(3,1), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            set(gca, 'tickdir', 'out');
            set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
            set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
            hold on
            p = polyfit(LiquidCal(1).Table(:,1),LiquidCal(1).Table(:,2),3);
            Vector = polyval(p,0:10:150);
            plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
            title('Left valve')
            h = legend({'Calibration measurements', 'Verification (Red/Green)'});
            set(h, 'Location', 'Best');
            subplot(1,3,2);
            scatter(LiquidCal(2).Table(:,1), LiquidCal(2).Table(:,2), 'LineWidth', 2)
            
            hold on
            % Add verification points
            if VerifiedValues(1,2) == 1
                scatter(V(1,2), ActualSinglePulseVolume(1,2), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(1,2), ActualSinglePulseVolume(1,2), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(2,2) == 1
                scatter(V(2,2),ActualSinglePulseVolume(2,2), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(2,2), ActualSinglePulseVolume(2,2), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(3,2) == 1
                scatter(V(3,2), ActualSinglePulseVolume(3,2), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(3,2), ActualSinglePulseVolume(3,2), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            
            set(gca, 'tickdir', 'out');
            set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
            set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
            hold on
            p = polyfit(LiquidCal(2).Table(:,1),LiquidCal(2).Table(:,2),3);
            Vector = polyval(p,0:10:150);
            plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
            title('Center valve')
            subplot(1,3,3);
            scatter(LiquidCal(3).Table(:,1), LiquidCal(3).Table(:,2), 'LineWidth', 2)
            
            hold on
            % Add verification points
            if VerifiedValues(1,3) == 1
                scatter(V(1,3), ActualSinglePulseVolume(1,3), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(1,3), ActualSinglePulseVolume(1,3), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(2,3) == 1
                scatter(V(2,3),ActualSinglePulseVolume(2,3), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(2,3), ActualSinglePulseVolume(2,3), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            if VerifiedValues(3,3) == 1
                scatter(V(3,3), ActualSinglePulseVolume(3,3), 'MarkerEdgeColor', [0 1 0], 'LineWidth', 2)
            else
                scatter(V(3,3), ActualSinglePulseVolume(3,3), 'MarkerEdgeColor', [1 0 0], 'LineWidth', 2)
            end
            
            set(gca, 'tickdir', 'out');
            set(get(gca, 'Ylabel'), 'String', 'Liquid amount delivered (ul)');
            set(get(gca, 'Xlabel'), 'String', 'Valve-open duration (ms)');
            hold on
            p = polyfit(LiquidCal(3).Table(:,1),LiquidCal(3).Table(:,2),3);
            Vector = polyval(p,0:10:150);
            plot(0:10:150, Vector, 'k-', 'LineWidth', 1.1);
            title('Right valve')
            for x = 1:3
                for y = 1:3
                    if isnan(ActualSinglePulseVolume(x,y))
                        VerifiedValues(x,y) = 1;
                    end
                end
            end
            if sum(sum(VerifiedValues)) == 9
                msgbox('Verification passed! Calibration files updated.', 'Modal')
                load LiquidCalibration
                loadBpodPath
%                 SavePath = [BpodPath '\Bpod System Files\LiquidCalibration.mat'];
%                 LiquidCal(1).LastDateVerified = now;
%                 save(SavePath, 'LiquidCal');
            else
                msgbox('Verification failed. A full calibration is recommended.', 'Modal')
                BpodErrorSound;
            end
            
        end
    end
    handles.output = hObject;
    guidata(hObject, handles);
end
if handles.Calibrating == 1
    if handles.CalibrationRound <= 7
        LeftAmount = str2double(get(handles.edit7, 'String'));
        CenterAmount = str2double(get(handles.edit6, 'String'));
        RightAmount = str2double(get(handles.edit1, 'String'));
        handles.CalibrationMeasurements(handles.CalibrationRound,1) = LeftAmount;
        handles.CalibrationMeasurements(handles.CalibrationRound,2) = CenterAmount;
        handles.CalibrationMeasurements(handles.CalibrationRound,3) = RightAmount;
        handles.CalibrationRound = handles.CalibrationRound + 1;
        if handles.CalibrationRound < 7
            k = msgbox(['Measuring point ' num2str(handles.CalibrationRound) ' of 6. Please refill liquid and click Ok to begin.'], 'modal');
            waitfor(k);
            ValveDuration(1:3) = handles.DurationsToTest(handles.CalibrationRound);
            LiquidRewardCal(100, [ValveDuration ValveDuration ValveDuration], 500);
            set(handles.edit7, 'Enable', 'on');
            set(handles.edit6, 'Enable', 'on');
            set(handles.edit1, 'Enable', 'on');
            set(handles.edit7, 'String', '0.00');
            set(handles.edit6, 'String', '0.00');
            set(handles.edit1, 'String', '0.00');
            set(handles.pushbutton2, 'Enable', 'off');
            set(handles.pushbutton5, 'Enable', 'on');
            uicontrol(handles.edit7);
            handles.output = hObject;
            guidata(hObject, handles);
        end
        
    end
    if handles.CalibrationRound == 7
            set(handles.pushbutton2, 'Enable', 'on');
            set(handles.edit7, 'Enable', 'off');
            set(handles.edit6, 'Enable', 'off');
            set(handles.edit1, 'Enable', 'off');
            set(handles.pushbutton5, 'Enable', 'off');
            set(handles.edit7, 'String', '0.00');
            set(handles.edit6, 'String', '0.00');
            set(handles.edit1, 'String', '0.00');
            load LiquidCalibration
            for x = 1:3
                Table = [handles.DurationsToTest' handles.CalibrationMeasurements(:,x)];
                Table(:,2) = Table(:,2)*10; % Convert to microliters
                LiquidCal(x).Table = Table;
                LiquidCal(x).TrinomialCoeffs = polyfit(LiquidCal(x).Table(:,2),LiquidCal(x).Table(:,1),3);
            end
            loadBpodPath
            TestSavePath = [BpodPath 'Calibration Files'];
            if exist(TestSavePath) ~= 7
                mkdir(TestSavePath);
            end
            SavePath = [BpodPath 'Calibration Files\LiquidCalibration.mat'];
            LiquidCal(1).LastDateVerified = now;
            save(SavePath, 'LiquidCal');
            msgbox('       Calibration files saved.')
            BpodErrorSound;
    end
end
% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double

AmountDelivered = str2double(get(handles.edit5, 'String'));
AmountExpected = str2double(get(handles.text16, 'String'));
Error = str2double(get(handles.text17, 'String'));

if (AmountDelivered > (AmountExpected - Error)) && (AmountDelivered < (AmountExpected + Error))
    set(handles.edit5, 'BackgroundColor', [.2 1 .2])
else
    set(handles.edit5, 'BackgroundColor', [1 .2 .2])
end

% Choose default command line output for LiquidRewardCalGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function edit8_Callback(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit8 as text
%        str2double(get(hObject,'String')) returns contents of edit8 as a double
AmountDelivered = str2double(get(handles.edit8, 'String'));
AmountExpected = str2double(get(handles.text16, 'String'));
Error = str2double(get(handles.text17, 'String'));

if (AmountDelivered >= (AmountExpected - Error)) && (AmountDelivered <= (AmountExpected + Error))
    set(handles.edit8, 'BackgroundColor', [.2 1 .2])
else
    set(handles.edit8, 'BackgroundColor', [1 .2 .2])
end

% Choose default command line output for LiquidRewardCalGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function edit8_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit9_Callback(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit9 as text
%        str2double(get(hObject,'String')) returns contents of edit9 as a double
AmountDelivered = str2double(get(handles.edit9, 'String'));
AmountExpected = str2double(get(handles.text16, 'String'));
Error = str2double(get(handles.text17, 'String'));

if (AmountDelivered >= (AmountExpected - Error)) && (AmountDelivered <= (AmountExpected + Error))
    set(handles.edit9, 'BackgroundColor', [.2 1 .2])
else
    set(handles.edit9, 'BackgroundColor', [1 .2 .2])
end

% Choose default command line output for LiquidRewardCalGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function edit9_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit6_Callback(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit6 as text
%        str2double(get(hObject,'String')) returns contents of edit6 as a double


% --- Executes during object creation, after setting all properties.
function edit6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit7_Callback(hObject, eventdata, handles)
% hObject    handle to edit7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit7 as text
%        str2double(get(hObject,'String')) returns contents of edit7 as a double


% --- Executes during object creation, after setting all properties.
function edit7_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
